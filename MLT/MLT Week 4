{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Week 4 MLT","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOIw9aZRkig0UNwtHotewZS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Least Square Classification from Scratch**"],"metadata":{"id":"KTlDdxwb9CLE"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"kPs8-NBu5zyY"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","source":["class LabelTransformer(object):\n","  def __init__(self,n_classes:int=None):\n","    self.n_classes=n_classes\n","\n","  @property\n","\n","  def n_classes(self):\n","    return self.__n_classes\n","\n","  @n_classes.setter\n","  def n_classes(self,K):\n","    self.__n_classes=K\n","    self.__encoder= None if K is None else np.eye(K)\n","\n","  @property\n","  def encoder(self):\n","    return self.__encoder\n","  def encode(self, class_indices:np.ndarray):\n","    if self.n_classes is None:\n","      self.n_classes=np.max(class_indices)+1\n","    return self.encoder[class_indices]\n","\n","  def decode(self,onehot:np.ndarray):\n","    return np.argmax(onehot,axis=1)\n","\n","  "],"metadata":{"id":"tZfrBoZc6SMO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["binary_labels=LabelTransformer(2).encode(np.array([1,0,1,0]))\n","binary_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8kbOVw0P73Yj","executionInfo":{"status":"ok","timestamp":1653398929151,"user_tz":-330,"elapsed":15,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"317888df-ddc4-4060-df77-7bbf9da0a493"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.]])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["multiclass_labels=LabelTransformer(3).encode(np.array([1,0,1,2]))\n","multiclass_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J2GZOLpF8AGv","executionInfo":{"status":"ok","timestamp":1653398929151,"user_tz":-330,"elapsed":13,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"1e40e5e2-18b0-44a4-d561-77d5457eabb3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1., 0.],\n","       [1., 0., 0.],\n","       [0., 1., 0.],\n","       [0., 0., 1.]])"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["binary_labels=LabelTransformer"],"metadata":{"id":"-dbEjcX5KLzn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# class LeastSquareClassification(object):\n","#   def __init__(self):\n","#     self.t0=20\n","#     self.t1=1000\n","  \n","#   def predict(self,X:np.ndarray)->np.ndarray:\n","#     assert X.shape[-1]==self.w.shape[0], f\"X shape {X.shape} and w shape {self.w.shape}, are not compatible\"\n","#     return np.argmax(X @ self.w, axis=-1)\n","  \n","#   def predict_internal(self, X:np.ndarray)-> np.ndarray:\n","#     assert X.shape[-1]==self.w.shape[0], f\"X shape {X.shape} and w shape {self.w.shape}, are not compatible\"\n","#     return (X @ self.w)\n","\n","#   def loss(self,X:np.ndarray, y:np.ndarray, reg_rate:float)->float:\n","\n"],"metadata":{"id":"KzDnFvgn8gZS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# def create_toy_data(add_outliers=False,add_class=False):\n","#   x0=np.random.normal(size=50).reshape(-1,2)-1\n","#   x1=np.random.normal(size=50).reshape(-1,2)+1\n","#   if add_outliers:\n","#     x_1=np.random.normal(size=10).reshape(-1,2)+np.array([5.,10.])\n","#     return np.concatenate([x0,x1,x_1]), np.concatenate([np.zeros(25),np.ones(30)]).astype(np.int)\n","#   if add_class:\n","#     x2=np.random.normal(size=50).reshape(-1,2)+2\n","#     return np.concatenate([x0,x1,x2]), np.concatenate([np.zeros(25),np.ones(25),2+np.zeros(25)]).astype(np.int)\n","#   return np.concatenate([x0,x1]), np.concatenate([np.zeros(25),np.ones(25)]).astype(np.int)"],"metadata":{"id":"5Ika-ZW6X-gn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import itertools\n","import functools\n","def get_combinations(x,degree):\n","  return itertools.combinations_with_replacement(x,degree)\n","\n","def compute_new_features(items):\n","  return functools.reduce(lambda x,y:x*y,items)"],"metadata":{"id":"r0g1KfCaaNHE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def polynomial_transform(x,degree,logging=False):\n","  if x.ndim==1:\n","    x=x[:,None]\n","  x_t=x.transpose()\n","  features=[np.ones(len(x))]\n","\n","  if logging:\n","    print(\"input: \",x)\n","  for degree in range(1, degree+1):\n","    for items in get_combinations(x_t,degree):\n","      features.append(compute_new_features(items))\n","      if logging:\n","        print(items,':',compute_new_features(items))\n","  if logging:\n","    print(np.asarray(features).transpose())\n","  return np.asarray(features).transpose()"],"metadata":{"id":"ZuhX0HjmaIl7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","def preprocess(add_class=False,add_outliers=False,degree=1):\n","  x,y=create_toy_data(add_outliers,add_class)\n","  x_poly=polynomial_transform(x,degree=degree)\n","  x_train,x_test,y_train,y_test=train_test_split(x_poly,y)\n","  y_train_trans=LabelTransformer().encode(y_train)\n","  y_test_trans=LabelTransformer().encode(y_test)\n","  return x_train, x_test, y_train, y_test, y_train_trans,y_test_trans\n","\n"],"metadata":{"id":"Sx1sgj-SZY4o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","sns.set_context('notebook',font_scale=1.5,rc={\"lines.linewidth\":2.5})\n","def visualize_model(x_train,labels,lsc_obj,degree=1):\n","  f=plt.figure(figsize=(8,8))\n","\n","  x1_min=np.min(x_train[:,1])\n","  x1_max=np.max(x_train[:,1]) \n","  x2_min=np.min(x_train[:,2])\n","  x2_max=np.max(x_train[:,2])\n","\n","  x1_test,x2_test=np.meshgrid(np.linspace(x1_min,x1_max,100),np.linspace(x2_min, x2_max,100))\n","  x_test=np.array([x1_test, x2_test]).reshape(2,-1).T\n","  x_test_poly=polynomial_transform(x_test,degree=degree)\n","  y_test=lsc_obj.predict(x_test_poly)\n","\n","  sns.scatterplot(data=x_train, x=x_train[:,1],y=x_train[:,2],hue=labels)\n","  plt.contourf(x1_test,x2_test,y_test.reshape(100,100),alpha=0.5,\n","               levels=np.linspace(0,1,3))\n","  \n","  plt.xlabel(\"$x_1$\")\n","  plt.ylabel(\"$x_2$\")\n","  plt.xlim(x1_min,x1_max)\n","  plt.ylim(x2_min,x2_max)\n","  plt.gca().set_aspect('equal', adjustable='box')\n","  plt.show()\n"],"metadata":{"id":"YgukE6NDaQrf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train,x_test,y_train,y_test,y_train_trans,y_test_trans=preprocess()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"id":"YhjxcGRygDf-","executionInfo":{"status":"error","timestamp":1653398930227,"user_tz":-330,"elapsed":566,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"43e6bc86-063f-4bd0-a989-3464b1111365"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-7b65970dc4c4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train_trans\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test_trans\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpreprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-11-d99a743172a9>\u001b[0m in \u001b[0;36mpreprocess\u001b[0;34m(add_class, add_outliers, degree)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mpreprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0madd_class\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0madd_outliers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdegree\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcreate_toy_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0madd_outliers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0madd_class\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0mx_poly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpolynomial_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdegree\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdegree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_poly\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'create_toy_data' is not defined"]}]},{"cell_type":"code","source":["print('shape of training feature matrix: ', x_train.shape)\n","print('shape of label vector: ',  y_train.shape)\n","print('shape of test feature matrix: ', x_test.shape)\n","print('shape of test label vector: ',  y_test.shape)"],"metadata":{"id":"lijPz4mxnUQA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.set_style('white')\n","f=plt.figure(figsize=(8,8))\n","sns.set_context('notebook',font_scale=1.5, rc={\"lines.linewidth\":2.5})\n","\n","sns.scatterplot(data=x_train, x=x_train[:,2],y=x_train[:,-1],hue=y_train)\n","plt.xlabel(\"$x_1$\")\n","plt.ylabel(\"$x_2$\")\n","plt.show()"],"metadata":{"id":"F3sjxgn9qHTO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Perceptron**"],"metadata":{"id":"KxKdpl6S5VPg"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","np.random.seed(1234)"],"metadata":{"id":"dmr1i-e-qspR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import itertools\n","import functools\n","def get_combinations(x,degree):\n","  return itertools.combinations_with_replacement(x,degree)\n","\n","def compute_new_features(items):\n","  return functools.reduce(lambda x,y:x*y,items)\n","\n","def polynomial_transform(x,degree,logging=False):\n","  if x.ndim==1:\n","    x=x[:,None]\n","  x_t=x.transpose()\n","  features=[np.ones(len(x))]\n","\n","  if logging:\n","    print(\"input: \",x)\n","  for degree in range(1, degree+1):\n","    for items in get_combinations(x_t,degree):\n","      features.append(compute_new_features(items))\n","      if logging:\n","        print(items,':',compute_new_features(items))\n","  if logging:\n","    print(np.asarray(features).transpose())\n","  return np.asarray(features).transpose()\n"],"metadata":{"id":"Igxohg1p97Af","executionInfo":{"status":"ok","timestamp":1653455932936,"user_tz":-330,"elapsed":5,"user":{"displayName":"Param","userId":"18259045148872251788"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["class Perceptron:\n","  def __init__(self):\n","    return\n","  def predict(self,X):\n","    z=X@ self.w\n","    return np.where(z>=0,1,-1)\n","\n","  def loss(self,X,y):\n","    return np.sum(np.maximum(-1*self.predict(X)*y,\n","                             np.zeros(y.shape[0])))\n","  \n","  def train (self,X,y,epochs=10,lr=0.001):\n","    self.w=np.zeros(X.shape[1])\n","    self.errors_all=[]\n","    self.w_all=[]\n","\n","    for _ in range (epochs):\n","      errors=0\n","      for xi, target in zip (X,y):\n","        self.w+=lr*(target-self.predict (xi))*xi\n","        errors+=(max(-1*self.predict(xi)*target,0))\n","      self.errors_all.append(errors)\n","      self.w_all.append(self.w)\n","      print('w: ',perceptron_obj.w)\n","      print('j(w):', perceptron_obj.errors_all[-1])\n","      \n","      if self.loss(X,y)==0:\n","        break\n"],"metadata":{"id":"1GEyguba_Cdq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Linearly seperable case"],"metadata":{"id":"woepWo72C67V"}},{"cell_type":"code","source":["def create_toy_data(add_outliers=False, add_class=False):\n","    x0 = np.random.normal(size=50).reshape(-1, 2) - 1\n","    x1 = np.random.normal(size=50).reshape(-1, 2) + 1.\n","    if add_outliers:\n","        x_1 = np.random.normal(size=10).reshape(-1, 2) + np.array([5., 10.])\n","        return np.concatenate([x0, x1, x_1]), np.concatenate([np.zeros(25), np.ones(30)]).astype(np.int)\n","    if add_class:\n","        x2 = np.random.normal(size=50).reshape(-1, 2) + 3.\n","        return np.concatenate([x0, x1, x2]), np.concatenate([np.zeros(25), np.ones(25), 2 + np.zeros(25)]).astype(np.int)\n","    return np.concatenate([x0, x1]), np.concatenate([np.zeros(25), np.ones(25)]).astype(np.int)"],"metadata":{"id":"pwpyM5p5D7Uo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","x,y=create_toy_data()\n","x_poly=polynomial_transform(x,degree=1)\n","x_train,x_test,y_train,y_test=train_test_split(x_poly,y)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YC6k08C2C1yI","executionInfo":{"status":"ok","timestamp":1653399017904,"user_tz":-330,"elapsed":7,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"c24437cb-c4db-4802-d278-b3fa84d94cb9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","  # Remove the CWD from sys.path while we load stuff.\n"]}]},{"cell_type":"code","source":["perceptron_obj=Perceptron()\n","perceptron_obj.train(x_train,y_train,lr=1)\n","visualize_model(x_train,y_train,perceptron_obj, degree=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":591},"id":"jslsGI35DO_h","executionInfo":{"status":"ok","timestamp":1653399018971,"user_tz":-330,"elapsed":476,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"a7971ed9-9c05-404e-ef81-0cb837dba019"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["w:  [3.         0.75563623 1.72544122]\n","j(w): 0\n","w:  [4.         5.98810618 2.37815907]\n","j(w): 0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 576x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["perceptron_obj.errors_all"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S3q2WlQCDlq7","executionInfo":{"status":"ok","timestamp":1653399018972,"user_tz":-330,"elapsed":17,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"c844d61b-6a34-4f7d-9e2b-44235bbf0f89"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 0]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["plt.plot(np.arange(len(perceptron_obj.errors_all)),perceptron_obj.errors_all,'b-')\n","plt.xlabel('Iterations #')\n","plt.ylabel('$J(\\mathbf{w})$')\n","plt.title('Learning Curve')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"GseoLowZESby","executionInfo":{"status":"ok","timestamp":1653399019697,"user_tz":-330,"elapsed":735,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"035be34a-0729-4709-ca17-5c7f76dd1838"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Learning Curve')"]},"metadata":{},"execution_count":21},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Non seperable case"],"metadata":{"id":"8d4Az5z8FOzP"}},{"cell_type":"code","source":["x,y=create_toy_data(add_outliers=True, add_class=True)\n","x_poly=polynomial_transform(x, degree=1)\n","x_train, y_train, x_test, y_test=train_test_split(x_poly,y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3N87u-0vEsq6","executionInfo":{"status":"ok","timestamp":1653399019697,"user_tz":-330,"elapsed":6,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"b43170ab-bd9a-46ff-d8f4-c311c48eaa1a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","  \n"]}]},{"cell_type":"code","source":["perceptron_obj2=Perceptron()\n","perceptron_obj2.train(x_train,y_train,lr=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":304},"id":"FSIRJ4DWFe5r","executionInfo":{"status":"error","timestamp":1653399020337,"user_tz":-330,"elapsed":6,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"4fe97380-6834-44e7-d01d-4acaf9a8dcf0"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-f0c6cfba5c66>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mperceptron_obj2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mPerceptron\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mperceptron_obj2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-16-ebb03c4ca6af>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, X, y, epochs, lr)\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0mxi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mxi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mxi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0merrors\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors_all\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw_all\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"CrSwZM0dGDoO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y=np.array([1,2])\n","y_hat=np.array([3,4])\n","def ConfusionMatrix(y_hat,y):\n","  TN = 0\n","  FP = 0\n","  FN = 0\n","  TP = 0\n","  cm = confusion_matrix(y,y_hat)\n","\n","  return cm"],"metadata":{"id":"LnrrATjvWjrL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","x = np.array([2, 0, 2, 2, 0, 1])\n","y = np.array([0, 0, -2, 2, 0, -3])\n","w = np.array([0,2,-1,-4,2, 2])\n","# confusion_matrix(y_true, y_pred)\n","def percep_loss(x,w,y):\n","  z=x@ w\n","  k=np.where(z>=0,1,-1)\n","  samplewise_loss=np.sum(np.maximum(-1*k*y,np.zeros(y.shape[0])))\n","\n","  return samplewise_loss"],"metadata":{"id":"K54hv0sAWuyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["percep_loss(x,w,y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vuRFjsONWwcu","executionInfo":{"status":"ok","timestamp":1653399022266,"user_tz":-330,"elapsed":7,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"994da4ca-3aad-43ee-fb6d-caa1f1649f1a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.0"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["def onehot(y):\n","  n=y.unique\n","  return n"],"metadata":{"id":"prglVunvbUGQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["onehot(np.array([0,1,1,2]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":252},"id":"EZvlbC4uislR","executionInfo":{"status":"error","timestamp":1653399023509,"user_tz":-330,"elapsed":10,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"48755637-aaf7-4e97-a279-5be05813e5f7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-5aa932838ab1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0monehot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-27-b11115eece6c>\u001b[0m in \u001b[0;36monehot\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0monehot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'unique'"]}]},{"cell_type":"code","source":["x=np.array([[1,2],[3,4]])\n","w=np.array([[1],[2]])\n","y=np.array([[0],[1]])\n","\n","\n","\n","\n","epochs=5\n","\n","\n","for i in range(epochs):\n","  z=x@w\n","  res=np.where(z>=0,1,-1)\n","  delw=x@(y-res)\n","  w=w+delw\n","  print(w)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZpzEPAxUitxb","executionInfo":{"status":"ok","timestamp":1653399879594,"user_tz":-330,"elapsed":362,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"826d9a80-0f89-4f9b-f233-737655b00d57"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0]\n"," [-1]]\n","[[ 5]\n"," [10]]\n","[[4]\n"," [7]]\n","[[3]\n"," [4]]\n","[[2]\n"," [1]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.datasets import make_circles\n","x,y=make_circles()\n","x_poly=polynomial_transform(x,degree=3)\n","print(x_poly.shape[1])"],"metadata":{"id":"eYbxnvCrQVq5","executionInfo":{"status":"ok","timestamp":1653456621957,"user_tz":-330,"elapsed":5,"user":{"displayName":"Param","userId":"18259045148872251788"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0e3714af-41ea-45dd-bce1-31cd269014f5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n"]}]},{"cell_type":"code","source":["a=np.array([0,1,1,0])\n","b=np.array([0,1,1,0])"],"metadata":{"id":"YYQtRfcep78U","executionInfo":{"status":"ok","timestamp":1653458900275,"user_tz":-330,"elapsed":2,"user":{"displayName":"Param","userId":"18259045148872251788"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["if all(a)==all(b):\n","  print(False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e8Tg3BfE0jRQ","executionInfo":{"status":"ok","timestamp":1653458901907,"user_tz":-330,"elapsed":2,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"1c4b5093-35a5-452b-d0c2-4dae638585c3"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]},{"cell_type":"code","source":["len(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"guv-3mg_0rNk","executionInfo":{"status":"ok","timestamp":1653460004619,"user_tz":-330,"elapsed":3,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"194bba49-2530-4978-91ad-d75d887a310d"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":[""],"metadata":{"id":"BGsHlTsv5U9D"},"execution_count":null,"outputs":[]}]}