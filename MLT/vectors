{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"vectors","provenance":[],"authorship_tag":"ABX9TyOrGnnQdFQRpB/i7s2v+CYX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"984qh3W1Dos3"},"outputs":[],"source":["import numpy as np"]},{"cell_type":"code","source":["x=np.array([1, 2, 3])\n","x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kDC0qxjRDrgD","executionInfo":{"status":"ok","timestamp":1651751468382,"user_tz":-330,"elapsed":551,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"979f39fa-3c26-424b-fee5-f7eda0920687"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3])"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["type(x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4-YHY8dHDwo_","executionInfo":{"status":"ok","timestamp":1651751478612,"user_tz":-330,"elapsed":7,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"20f6c6c3-c79e-467e-f530-ea0b139fc5c1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["y=np.array([1,2,3])\n","y\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QNzG417xD11K","executionInfo":{"status":"ok","timestamp":1651751551053,"user_tz":-330,"elapsed":519,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"c42e1491-8ebd-4fa2-fa84-d8fcfffbb000"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["z=x+y\n","z"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l35OR5lID8zL","executionInfo":{"status":"ok","timestamp":1651751552916,"user_tz":-330,"elapsed":5,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"0774464e-cab3-490c-e65b-5f063edeab20"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 4, 6])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["prod=x*y"],"metadata":{"id":"zo8RHMHJEAGq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["prod"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oMAUxfNrEMla","executionInfo":{"status":"ok","timestamp":1651751575216,"user_tz":-330,"elapsed":8,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"4754de46-d4cb-49b3-a86c-4667c4e0319c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 4, 9])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["x1=np.array([[1,2],[3,4]])\n","x2=np.array([[1,2],[3,4]])\n","prod1=x1*x2"],"metadata":{"id":"w5a-29cnENfl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["prod1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N3-xL7uaEfRE","executionInfo":{"status":"ok","timestamp":1651755096342,"user_tz":-330,"elapsed":525,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"802e67ad-8121-4db2-fd54-4b6cda091786"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1,  4],\n","       [ 9, 16]])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["prod2 = x1 @ x2\n","prod2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cu9dMOqHRpQJ","executionInfo":{"status":"ok","timestamp":1651755239242,"user_tz":-330,"elapsed":613,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"f7c63089-8050-4662-c3c0-798d80dd24a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 7, 10],\n","       [15, 22]])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["A = np.array([[1, 2, 3], [4, 5, 6]])\n","A.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FS_-0etmSMAu","executionInfo":{"status":"ok","timestamp":1651755549225,"user_tz":-330,"elapsed":556,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"e46eb530-cebd-40e8-a3fd-713bbb8c5817"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2, 3)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["A = np.array(([1, 2, 3]))\n","B = np.array([[4, 5, 6]])\n","print(A + B)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6yte9U5TXzy","executionInfo":{"status":"ok","timestamp":1651755582348,"user_tz":-330,"elapsed":520,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"62c079da-8479-41b2-a6e8-b74f9c050987"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[5 7 9]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","x = np.linspace(-1, 1, 5)\n","x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QssybbrZTf6H","executionInfo":{"status":"ok","timestamp":1651755805758,"user_tz":-330,"elapsed":1506,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"4facee28-785c-40d9-ae70-85f62b43f695"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1. , -0.5,  0. ,  0.5,  1. ])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["x=np.array([[1,2,3],[4,5,6]])\n","y=np.array([[7,8],[9,10],[11,12]])\n","z=x@y\n","z"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nt5krnLGUVa7","executionInfo":{"status":"ok","timestamp":1651755939532,"user_tz":-330,"elapsed":871,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"9cf035b9-9cb8-404e-f0f5-941027d5eae7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 58,  64],\n","       [139, 154]])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["A = np.array([[1, 2, 3, 4],\n","              [5, 6, 7, 8],\n","              [9, 10, 11, 12],\n","              [13, 14, 15, 16]])\n","\n","B = A[:, 2]\n","B"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CIp04rP-Uve0","executionInfo":{"status":"ok","timestamp":1651756053431,"user_tz":-330,"elapsed":3,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"d8d05623-b139-4dd5-bcf9-a5026db9f73d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 3,  7, 11, 15])"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["A = np.array([[1, 2, 3, 4, 5],\n","              [6, 7, 8, 9, 10],\n","              [11, 12, 13, 14, 15]])\n","print(A[1, 2: 4])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzfFGGCZVRk5","executionInfo":{"status":"ok","timestamp":1651756096106,"user_tz":-330,"elapsed":525,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"864659bb-ebb7-4178-ab0e-44045fa3fa7c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[8 9]\n"]}]},{"cell_type":"code","source":["A = np.array([[1, 2, 3, 4, 5],\n","              [6, 7, 8, 9, 10],\n","              [11, 12, 13, 14, 15]])\n","b=np.sum(A,axis=0)\n","b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vg_0LHS4VdVF","executionInfo":{"status":"ok","timestamp":1651769650950,"user_tz":-330,"elapsed":7,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"e57ee35e-25c5-4713-f863-c4d9f68711e3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([18, 21, 24, 27, 30])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["s=A.shape\n","denom=s[0]\n","l=[]\n","for i in b:\n","  ele=i/denom\n","  l.append(ele)\n","print(l)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Y93kR_lWFWA","executionInfo":{"status":"ok","timestamp":1651769663348,"user_tz":-330,"elapsed":6,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"dc4350de-043b-4727-e654-377fb6719ef0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[6.0, 7.0, 8.0, 9.0, 10.0]\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"moz95VttUl5G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["A.transpose()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rr6L6pWaIEGz","executionInfo":{"status":"ok","timestamp":1651770288325,"user_tz":-330,"elapsed":405,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"c3216e90-ba92-4408-d83a-ccb602fb907b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1,  6, 11],\n","       [ 2,  7, 12],\n","       [ 3,  8, 13],\n","       [ 4,  9, 14],\n","       [ 5, 10, 15]])"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["X is a m \\times nm×n matrix and WW is a n \\times pn×p matrix. bb is a pp dimensional vector. Write a function named compute that accepts XX, WW and bb as arguments and returns the value of the following expression:\n","\n","XW + bXW+b "],"metadata":{"id":"f-_4tlbDKGCH"}},{"cell_type":"code","source":["import numpy as np\n","def compute(X, W, b):\n","  prod=X@W + b\n","  return(prod)\n","\n","compute(np.array([1,2],[3,]))"],"metadata":{"id":"RfklbtquIKK-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","data=load_iris()"],"metadata":{"id":"IQ0mOMPJUmc0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fjlk-62xU0nR","executionInfo":{"status":"ok","timestamp":1651990814641,"user_tz":-330,"elapsed":657,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"0506a9c4-8ff5-4d62-98a2-546bb59a5f8e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'DESCR': '.. _iris_dataset:\\n\\nIris plants dataset\\n--------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 150 (50 in each of three classes)\\n    :Number of Attributes: 4 numeric, predictive attributes and the class\\n    :Attribute Information:\\n        - sepal length in cm\\n        - sepal width in cm\\n        - petal length in cm\\n        - petal width in cm\\n        - class:\\n                - Iris-Setosa\\n                - Iris-Versicolour\\n                - Iris-Virginica\\n                \\n    :Summary Statistics:\\n\\n    ============== ==== ==== ======= ===== ====================\\n                    Min  Max   Mean    SD   Class Correlation\\n    ============== ==== ==== ======= ===== ====================\\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\\n    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\\n    ============== ==== ==== ======= ===== ====================\\n\\n    :Missing Attribute Values: None\\n    :Class Distribution: 33.3% for each of 3 classes.\\n    :Creator: R.A. Fisher\\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\\n    :Date: July, 1988\\n\\nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\\nfrom Fisher\\'s paper. Note that it\\'s the same as in R, but not as in the UCI\\nMachine Learning Repository, which has two wrong data points.\\n\\nThis is perhaps the best known database to be found in the\\npattern recognition literature.  Fisher\\'s paper is a classic in the field and\\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\\ndata set contains 3 classes of 50 instances each, where each class refers to a\\ntype of iris plant.  One class is linearly separable from the other 2; the\\nlatter are NOT linearly separable from each other.\\n\\n.. topic:: References\\n\\n   - Fisher, R.A. \"The use of multiple measurements in taxonomic problems\"\\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in \"Contributions to\\n     Mathematical Statistics\" (John Wiley, NY, 1950).\\n   - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\\n   - Dasarathy, B.V. (1980) \"Nosing Around the Neighborhood: A New System\\n     Structure and Classification Rule for Recognition in Partially Exposed\\n     Environments\".  IEEE Transactions on Pattern Analysis and Machine\\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\\n   - Gates, G.W. (1972) \"The Reduced Nearest Neighbor Rule\".  IEEE Transactions\\n     on Information Theory, May 1972, 431-433.\\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al\"s AUTOCLASS II\\n     conceptual clustering system finds 3 classes in the data.\\n   - Many, many more ...',\n"," 'data': array([[5.1, 3.5, 1.4, 0.2],\n","        [4.9, 3. , 1.4, 0.2],\n","        [4.7, 3.2, 1.3, 0.2],\n","        [4.6, 3.1, 1.5, 0.2],\n","        [5. , 3.6, 1.4, 0.2],\n","        [5.4, 3.9, 1.7, 0.4],\n","        [4.6, 3.4, 1.4, 0.3],\n","        [5. , 3.4, 1.5, 0.2],\n","        [4.4, 2.9, 1.4, 0.2],\n","        [4.9, 3.1, 1.5, 0.1],\n","        [5.4, 3.7, 1.5, 0.2],\n","        [4.8, 3.4, 1.6, 0.2],\n","        [4.8, 3. , 1.4, 0.1],\n","        [4.3, 3. , 1.1, 0.1],\n","        [5.8, 4. , 1.2, 0.2],\n","        [5.7, 4.4, 1.5, 0.4],\n","        [5.4, 3.9, 1.3, 0.4],\n","        [5.1, 3.5, 1.4, 0.3],\n","        [5.7, 3.8, 1.7, 0.3],\n","        [5.1, 3.8, 1.5, 0.3],\n","        [5.4, 3.4, 1.7, 0.2],\n","        [5.1, 3.7, 1.5, 0.4],\n","        [4.6, 3.6, 1. , 0.2],\n","        [5.1, 3.3, 1.7, 0.5],\n","        [4.8, 3.4, 1.9, 0.2],\n","        [5. , 3. , 1.6, 0.2],\n","        [5. , 3.4, 1.6, 0.4],\n","        [5.2, 3.5, 1.5, 0.2],\n","        [5.2, 3.4, 1.4, 0.2],\n","        [4.7, 3.2, 1.6, 0.2],\n","        [4.8, 3.1, 1.6, 0.2],\n","        [5.4, 3.4, 1.5, 0.4],\n","        [5.2, 4.1, 1.5, 0.1],\n","        [5.5, 4.2, 1.4, 0.2],\n","        [4.9, 3.1, 1.5, 0.2],\n","        [5. , 3.2, 1.2, 0.2],\n","        [5.5, 3.5, 1.3, 0.2],\n","        [4.9, 3.6, 1.4, 0.1],\n","        [4.4, 3. , 1.3, 0.2],\n","        [5.1, 3.4, 1.5, 0.2],\n","        [5. , 3.5, 1.3, 0.3],\n","        [4.5, 2.3, 1.3, 0.3],\n","        [4.4, 3.2, 1.3, 0.2],\n","        [5. , 3.5, 1.6, 0.6],\n","        [5.1, 3.8, 1.9, 0.4],\n","        [4.8, 3. , 1.4, 0.3],\n","        [5.1, 3.8, 1.6, 0.2],\n","        [4.6, 3.2, 1.4, 0.2],\n","        [5.3, 3.7, 1.5, 0.2],\n","        [5. , 3.3, 1.4, 0.2],\n","        [7. , 3.2, 4.7, 1.4],\n","        [6.4, 3.2, 4.5, 1.5],\n","        [6.9, 3.1, 4.9, 1.5],\n","        [5.5, 2.3, 4. , 1.3],\n","        [6.5, 2.8, 4.6, 1.5],\n","        [5.7, 2.8, 4.5, 1.3],\n","        [6.3, 3.3, 4.7, 1.6],\n","        [4.9, 2.4, 3.3, 1. ],\n","        [6.6, 2.9, 4.6, 1.3],\n","        [5.2, 2.7, 3.9, 1.4],\n","        [5. , 2. , 3.5, 1. ],\n","        [5.9, 3. , 4.2, 1.5],\n","        [6. , 2.2, 4. , 1. ],\n","        [6.1, 2.9, 4.7, 1.4],\n","        [5.6, 2.9, 3.6, 1.3],\n","        [6.7, 3.1, 4.4, 1.4],\n","        [5.6, 3. , 4.5, 1.5],\n","        [5.8, 2.7, 4.1, 1. ],\n","        [6.2, 2.2, 4.5, 1.5],\n","        [5.6, 2.5, 3.9, 1.1],\n","        [5.9, 3.2, 4.8, 1.8],\n","        [6.1, 2.8, 4. , 1.3],\n","        [6.3, 2.5, 4.9, 1.5],\n","        [6.1, 2.8, 4.7, 1.2],\n","        [6.4, 2.9, 4.3, 1.3],\n","        [6.6, 3. , 4.4, 1.4],\n","        [6.8, 2.8, 4.8, 1.4],\n","        [6.7, 3. , 5. , 1.7],\n","        [6. , 2.9, 4.5, 1.5],\n","        [5.7, 2.6, 3.5, 1. ],\n","        [5.5, 2.4, 3.8, 1.1],\n","        [5.5, 2.4, 3.7, 1. ],\n","        [5.8, 2.7, 3.9, 1.2],\n","        [6. , 2.7, 5.1, 1.6],\n","        [5.4, 3. , 4.5, 1.5],\n","        [6. , 3.4, 4.5, 1.6],\n","        [6.7, 3.1, 4.7, 1.5],\n","        [6.3, 2.3, 4.4, 1.3],\n","        [5.6, 3. , 4.1, 1.3],\n","        [5.5, 2.5, 4. , 1.3],\n","        [5.5, 2.6, 4.4, 1.2],\n","        [6.1, 3. , 4.6, 1.4],\n","        [5.8, 2.6, 4. , 1.2],\n","        [5. , 2.3, 3.3, 1. ],\n","        [5.6, 2.7, 4.2, 1.3],\n","        [5.7, 3. , 4.2, 1.2],\n","        [5.7, 2.9, 4.2, 1.3],\n","        [6.2, 2.9, 4.3, 1.3],\n","        [5.1, 2.5, 3. , 1.1],\n","        [5.7, 2.8, 4.1, 1.3],\n","        [6.3, 3.3, 6. , 2.5],\n","        [5.8, 2.7, 5.1, 1.9],\n","        [7.1, 3. , 5.9, 2.1],\n","        [6.3, 2.9, 5.6, 1.8],\n","        [6.5, 3. , 5.8, 2.2],\n","        [7.6, 3. , 6.6, 2.1],\n","        [4.9, 2.5, 4.5, 1.7],\n","        [7.3, 2.9, 6.3, 1.8],\n","        [6.7, 2.5, 5.8, 1.8],\n","        [7.2, 3.6, 6.1, 2.5],\n","        [6.5, 3.2, 5.1, 2. ],\n","        [6.4, 2.7, 5.3, 1.9],\n","        [6.8, 3. , 5.5, 2.1],\n","        [5.7, 2.5, 5. , 2. ],\n","        [5.8, 2.8, 5.1, 2.4],\n","        [6.4, 3.2, 5.3, 2.3],\n","        [6.5, 3. , 5.5, 1.8],\n","        [7.7, 3.8, 6.7, 2.2],\n","        [7.7, 2.6, 6.9, 2.3],\n","        [6. , 2.2, 5. , 1.5],\n","        [6.9, 3.2, 5.7, 2.3],\n","        [5.6, 2.8, 4.9, 2. ],\n","        [7.7, 2.8, 6.7, 2. ],\n","        [6.3, 2.7, 4.9, 1.8],\n","        [6.7, 3.3, 5.7, 2.1],\n","        [7.2, 3.2, 6. , 1.8],\n","        [6.2, 2.8, 4.8, 1.8],\n","        [6.1, 3. , 4.9, 1.8],\n","        [6.4, 2.8, 5.6, 2.1],\n","        [7.2, 3. , 5.8, 1.6],\n","        [7.4, 2.8, 6.1, 1.9],\n","        [7.9, 3.8, 6.4, 2. ],\n","        [6.4, 2.8, 5.6, 2.2],\n","        [6.3, 2.8, 5.1, 1.5],\n","        [6.1, 2.6, 5.6, 1.4],\n","        [7.7, 3. , 6.1, 2.3],\n","        [6.3, 3.4, 5.6, 2.4],\n","        [6.4, 3.1, 5.5, 1.8],\n","        [6. , 3. , 4.8, 1.8],\n","        [6.9, 3.1, 5.4, 2.1],\n","        [6.7, 3.1, 5.6, 2.4],\n","        [6.9, 3.1, 5.1, 2.3],\n","        [5.8, 2.7, 5.1, 1.9],\n","        [6.8, 3.2, 5.9, 2.3],\n","        [6.7, 3.3, 5.7, 2.5],\n","        [6.7, 3. , 5.2, 2.3],\n","        [6.3, 2.5, 5. , 1.9],\n","        [6.5, 3. , 5.2, 2. ],\n","        [6.2, 3.4, 5.4, 2.3],\n","        [5.9, 3. , 5.1, 1.8]]),\n"," 'data_module': 'sklearn.datasets.data',\n"," 'feature_names': ['sepal length (cm)',\n","  'sepal width (cm)',\n","  'petal length (cm)',\n","  'petal width (cm)'],\n"," 'filename': 'iris.csv',\n"," 'frame': None,\n"," 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n","        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n","        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),\n"," 'target_names': array(['setosa', 'versicolor', 'virginica'], dtype='<U10')}"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["type(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jmuGjFpKU1mj","executionInfo":{"status":"ok","timestamp":1651990852582,"user_tz":-330,"elapsed":4,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"500bd320-6ca0-4eb8-f29a-2772f1475bb3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sklearn.utils.Bunch"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data.feature_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d2c8crlBU4pp","executionInfo":{"status":"ok","timestamp":1651990865312,"user_tz":-330,"elapsed":371,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"a45d98a0-e4b1-4ac7-c7cc-d7a819288ea5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sepal length (cm)',\n"," 'sepal width (cm)',\n"," 'petal length (cm)',\n"," 'petal width (cm)']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data.target_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8GfiyiOdVCE4","executionInfo":{"status":"ok","timestamp":1651990928807,"user_tz":-330,"elapsed":412,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"fc637a26-e3f9-4180-8d87-f0a30fe8ce21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['setosa', 'versicolor', 'virginica'], dtype='<U10')"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["data.data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UDSXx4FVVE1b","executionInfo":{"status":"ok","timestamp":1651990967997,"user_tz":-330,"elapsed":3,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"3f6bed02-542f-41bc-96e8-6eb5f72f08cc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150, 4)"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["feature_matrix, label_vector=load_iris(return_X_y=True)"],"metadata":{"id":"zjSoPlemVZgT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["feature_matrix.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bK0UIps-Vvn8","executionInfo":{"status":"ok","timestamp":1651991067841,"user_tz":-330,"elapsed":452,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"beedb93c-9de3-4740-cd10-bed2387cb2f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150, 4)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["label_vector.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fp50E15vVzdU","executionInfo":{"status":"ok","timestamp":1651991079839,"user_tz":-330,"elapsed":7,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"7eacf2e5-5209-4d53-95d7-5c47ad3ac30b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150,)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["from sklearn.datasets import load_breast_cancer\n","data=load_breast_cancer()"],"metadata":{"id":"Aic4W0gUV2Wv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-DBoSg1Ahvt2","executionInfo":{"status":"ok","timestamp":1651994201762,"user_tz":-330,"elapsed":401,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"8cc02db9-f3a1-4f4d-ec92-77579afce64e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'DESCR': '.. _breast_cancer_dataset:\\n\\nBreast cancer wisconsin (diagnostic) dataset\\n--------------------------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 569\\n\\n    :Number of Attributes: 30 numeric, predictive attributes and the class\\n\\n    :Attribute Information:\\n        - radius (mean of distances from center to points on the perimeter)\\n        - texture (standard deviation of gray-scale values)\\n        - perimeter\\n        - area\\n        - smoothness (local variation in radius lengths)\\n        - compactness (perimeter^2 / area - 1.0)\\n        - concavity (severity of concave portions of the contour)\\n        - concave points (number of concave portions of the contour)\\n        - symmetry\\n        - fractal dimension (\"coastline approximation\" - 1)\\n\\n        The mean, standard error, and \"worst\" or largest (mean of the three\\n        worst/largest values) of these features were computed for each image,\\n        resulting in 30 features.  For instance, field 0 is Mean Radius, field\\n        10 is Radius SE, field 20 is Worst Radius.\\n\\n        - class:\\n                - WDBC-Malignant\\n                - WDBC-Benign\\n\\n    :Summary Statistics:\\n\\n    ===================================== ====== ======\\n                                           Min    Max\\n    ===================================== ====== ======\\n    radius (mean):                        6.981  28.11\\n    texture (mean):                       9.71   39.28\\n    perimeter (mean):                     43.79  188.5\\n    area (mean):                          143.5  2501.0\\n    smoothness (mean):                    0.053  0.163\\n    compactness (mean):                   0.019  0.345\\n    concavity (mean):                     0.0    0.427\\n    concave points (mean):                0.0    0.201\\n    symmetry (mean):                      0.106  0.304\\n    fractal dimension (mean):             0.05   0.097\\n    radius (standard error):              0.112  2.873\\n    texture (standard error):             0.36   4.885\\n    perimeter (standard error):           0.757  21.98\\n    area (standard error):                6.802  542.2\\n    smoothness (standard error):          0.002  0.031\\n    compactness (standard error):         0.002  0.135\\n    concavity (standard error):           0.0    0.396\\n    concave points (standard error):      0.0    0.053\\n    symmetry (standard error):            0.008  0.079\\n    fractal dimension (standard error):   0.001  0.03\\n    radius (worst):                       7.93   36.04\\n    texture (worst):                      12.02  49.54\\n    perimeter (worst):                    50.41  251.2\\n    area (worst):                         185.2  4254.0\\n    smoothness (worst):                   0.071  0.223\\n    compactness (worst):                  0.027  1.058\\n    concavity (worst):                    0.0    1.252\\n    concave points (worst):               0.0    0.291\\n    symmetry (worst):                     0.156  0.664\\n    fractal dimension (worst):            0.055  0.208\\n    ===================================== ====== ======\\n\\n    :Missing Attribute Values: None\\n\\n    :Class Distribution: 212 - Malignant, 357 - Benign\\n\\n    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\\n\\n    :Donor: Nick Street\\n\\n    :Date: November, 1995\\n\\nThis is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\\nhttps://goo.gl/U2Uwz2\\n\\nFeatures are computed from a digitized image of a fine needle\\naspirate (FNA) of a breast mass.  They describe\\ncharacteristics of the cell nuclei present in the image.\\n\\nSeparating plane described above was obtained using\\nMultisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\\nConstruction Via Linear Programming.\" Proceedings of the 4th\\nMidwest Artificial Intelligence and Cognitive Science Society,\\npp. 97-101, 1992], a classification method which uses linear\\nprogramming to construct a decision tree.  Relevant features\\nwere selected using an exhaustive search in the space of 1-4\\nfeatures and 1-3 separating planes.\\n\\nThe actual linear program used to obtain the separating plane\\nin the 3-dimensional space is that described in:\\n[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\\nProgramming Discrimination of Two Linearly Inseparable Sets\",\\nOptimization Methods and Software 1, 1992, 23-34].\\n\\nThis database is also available through the UW CS ftp server:\\n\\nftp ftp.cs.wisc.edu\\ncd math-prog/cpo-dataset/machine-learn/WDBC/\\n\\n.. topic:: References\\n\\n   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \\n     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \\n     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\\n     San Jose, CA, 1993.\\n   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \\n     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \\n     July-August 1995.\\n   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\\n     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \\n     163-171.',\n"," 'data': array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2.654e-01, 4.601e-01,\n","         1.189e-01],\n","        [2.057e+01, 1.777e+01, 1.329e+02, ..., 1.860e-01, 2.750e-01,\n","         8.902e-02],\n","        [1.969e+01, 2.125e+01, 1.300e+02, ..., 2.430e-01, 3.613e-01,\n","         8.758e-02],\n","        ...,\n","        [1.660e+01, 2.808e+01, 1.083e+02, ..., 1.418e-01, 2.218e-01,\n","         7.820e-02],\n","        [2.060e+01, 2.933e+01, 1.401e+02, ..., 2.650e-01, 4.087e-01,\n","         1.240e-01],\n","        [7.760e+00, 2.454e+01, 4.792e+01, ..., 0.000e+00, 2.871e-01,\n","         7.039e-02]]),\n"," 'data_module': 'sklearn.datasets.data',\n"," 'feature_names': array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n","        'mean smoothness', 'mean compactness', 'mean concavity',\n","        'mean concave points', 'mean symmetry', 'mean fractal dimension',\n","        'radius error', 'texture error', 'perimeter error', 'area error',\n","        'smoothness error', 'compactness error', 'concavity error',\n","        'concave points error', 'symmetry error',\n","        'fractal dimension error', 'worst radius', 'worst texture',\n","        'worst perimeter', 'worst area', 'worst smoothness',\n","        'worst compactness', 'worst concavity', 'worst concave points',\n","        'worst symmetry', 'worst fractal dimension'], dtype='<U23'),\n"," 'filename': 'breast_cancer.csv',\n"," 'frame': None,\n"," 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","        0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n","        1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n","        1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n","        1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n","        0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n","        1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","        0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n","        1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n","        1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","        0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n","        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","        1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n","        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n","        1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n","        1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n","        1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n","        1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]),\n"," 'target_names': array(['malignant', 'benign'], dtype='<U9')}"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["data.data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xD-b6yt0hwau","executionInfo":{"status":"ok","timestamp":1651994215469,"user_tz":-330,"elapsed":406,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"52930c85-67a4-4691-cbba-75a26750f2d8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 30)"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["data.DESCR"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"cGi39xhlhySu","executionInfo":{"status":"ok","timestamp":1651994247370,"user_tz":-330,"elapsed":5,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"6c3e2f29-cb7e-485b-de9b-18342d26a923"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'.. _breast_cancer_dataset:\\n\\nBreast cancer wisconsin (diagnostic) dataset\\n--------------------------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 569\\n\\n    :Number of Attributes: 30 numeric, predictive attributes and the class\\n\\n    :Attribute Information:\\n        - radius (mean of distances from center to points on the perimeter)\\n        - texture (standard deviation of gray-scale values)\\n        - perimeter\\n        - area\\n        - smoothness (local variation in radius lengths)\\n        - compactness (perimeter^2 / area - 1.0)\\n        - concavity (severity of concave portions of the contour)\\n        - concave points (number of concave portions of the contour)\\n        - symmetry\\n        - fractal dimension (\"coastline approximation\" - 1)\\n\\n        The mean, standard error, and \"worst\" or largest (mean of the three\\n        worst/largest values) of these features were computed for each image,\\n        resulting in 30 features.  For instance, field 0 is Mean Radius, field\\n        10 is Radius SE, field 20 is Worst Radius.\\n\\n        - class:\\n                - WDBC-Malignant\\n                - WDBC-Benign\\n\\n    :Summary Statistics:\\n\\n    ===================================== ====== ======\\n                                           Min    Max\\n    ===================================== ====== ======\\n    radius (mean):                        6.981  28.11\\n    texture (mean):                       9.71   39.28\\n    perimeter (mean):                     43.79  188.5\\n    area (mean):                          143.5  2501.0\\n    smoothness (mean):                    0.053  0.163\\n    compactness (mean):                   0.019  0.345\\n    concavity (mean):                     0.0    0.427\\n    concave points (mean):                0.0    0.201\\n    symmetry (mean):                      0.106  0.304\\n    fractal dimension (mean):             0.05   0.097\\n    radius (standard error):              0.112  2.873\\n    texture (standard error):             0.36   4.885\\n    perimeter (standard error):           0.757  21.98\\n    area (standard error):                6.802  542.2\\n    smoothness (standard error):          0.002  0.031\\n    compactness (standard error):         0.002  0.135\\n    concavity (standard error):           0.0    0.396\\n    concave points (standard error):      0.0    0.053\\n    symmetry (standard error):            0.008  0.079\\n    fractal dimension (standard error):   0.001  0.03\\n    radius (worst):                       7.93   36.04\\n    texture (worst):                      12.02  49.54\\n    perimeter (worst):                    50.41  251.2\\n    area (worst):                         185.2  4254.0\\n    smoothness (worst):                   0.071  0.223\\n    compactness (worst):                  0.027  1.058\\n    concavity (worst):                    0.0    1.252\\n    concave points (worst):               0.0    0.291\\n    symmetry (worst):                     0.156  0.664\\n    fractal dimension (worst):            0.055  0.208\\n    ===================================== ====== ======\\n\\n    :Missing Attribute Values: None\\n\\n    :Class Distribution: 212 - Malignant, 357 - Benign\\n\\n    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\\n\\n    :Donor: Nick Street\\n\\n    :Date: November, 1995\\n\\nThis is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\\nhttps://goo.gl/U2Uwz2\\n\\nFeatures are computed from a digitized image of a fine needle\\naspirate (FNA) of a breast mass.  They describe\\ncharacteristics of the cell nuclei present in the image.\\n\\nSeparating plane described above was obtained using\\nMultisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\\nConstruction Via Linear Programming.\" Proceedings of the 4th\\nMidwest Artificial Intelligence and Cognitive Science Society,\\npp. 97-101, 1992], a classification method which uses linear\\nprogramming to construct a decision tree.  Relevant features\\nwere selected using an exhaustive search in the space of 1-4\\nfeatures and 1-3 separating planes.\\n\\nThe actual linear program used to obtain the separating plane\\nin the 3-dimensional space is that described in:\\n[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\\nProgramming Discrimination of Two Linearly Inseparable Sets\",\\nOptimization Methods and Software 1, 1992, 23-34].\\n\\nThis database is also available through the UW CS ftp server:\\n\\nftp ftp.cs.wisc.edu\\ncd math-prog/cpo-dataset/machine-learn/WDBC/\\n\\n.. topic:: References\\n\\n   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \\n     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \\n     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\\n     San Jose, CA, 1993.\\n   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \\n     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \\n     July-August 1995.\\n   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\\n     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \\n     163-171.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["data.target_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"URbFsLREh4zg","executionInfo":{"status":"ok","timestamp":1651994571434,"user_tz":-330,"elapsed":412,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"c862db3f-6af8-4b5d-c22e-8882210558b2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['malignant', 'benign'], dtype='<U9')"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["from sklearn.datasets import fetch_california_housing\n","housing_data=fetch_california_housing()\n","print(housing_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DnYrTxvEi0_D","executionInfo":{"status":"ok","timestamp":1651994757807,"user_tz":-330,"elapsed":2116,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"5fd99344-42c6-40e6-cb6c-c28b5b0b21d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'data': array([[   8.3252    ,   41.        ,    6.98412698, ...,    2.55555556,\n","          37.88      , -122.23      ],\n","       [   8.3014    ,   21.        ,    6.23813708, ...,    2.10984183,\n","          37.86      , -122.22      ],\n","       [   7.2574    ,   52.        ,    8.28813559, ...,    2.80225989,\n","          37.85      , -122.24      ],\n","       ...,\n","       [   1.7       ,   17.        ,    5.20554273, ...,    2.3256351 ,\n","          39.43      , -121.22      ],\n","       [   1.8672    ,   18.        ,    5.32951289, ...,    2.12320917,\n","          39.43      , -121.32      ],\n","       [   2.3886    ,   16.        ,    5.25471698, ...,    2.61698113,\n","          39.37      , -121.24      ]]), 'target': array([4.526, 3.585, 3.521, ..., 0.923, 0.847, 0.894]), 'frame': None, 'target_names': ['MedHouseVal'], 'feature_names': ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude'], 'DESCR': '.. _california_housing_dataset:\\n\\nCalifornia Housing dataset\\n--------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 20640\\n\\n    :Number of Attributes: 8 numeric, predictive attributes and the target\\n\\n    :Attribute Information:\\n        - MedInc        median income in block group\\n        - HouseAge      median house age in block group\\n        - AveRooms      average number of rooms per household\\n        - AveBedrms     average number of bedrooms per household\\n        - Population    block group population\\n        - AveOccup      average number of household members\\n        - Latitude      block group latitude\\n        - Longitude     block group longitude\\n\\n    :Missing Attribute Values: None\\n\\nThis dataset was obtained from the StatLib repository.\\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\\n\\nThe target variable is the median house value for California districts,\\nexpressed in hundreds of thousands of dollars ($100,000).\\n\\nThis dataset was derived from the 1990 U.S. census, using one row per census\\nblock group. A block group is the smallest geographical unit for which the U.S.\\nCensus Bureau publishes sample data (a block group typically has a population\\nof 600 to 3,000 people).\\n\\nAn household is a group of people residing within a home. Since the average\\nnumber of rooms and bedrooms in this dataset are provided per household, these\\ncolumns may take surpinsingly large values for block groups with few households\\nand many empty houses, such as vacation resorts.\\n\\nIt can be downloaded/loaded using the\\n:func:`sklearn.datasets.fetch_california_housing` function.\\n\\n.. topic:: References\\n\\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\\n      Statistics and Probability Letters, 33 (1997) 291-297\\n'}\n"]}]},{"cell_type":"code","source":["housing_data.data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bSR3pMOJj30g","executionInfo":{"status":"ok","timestamp":1651994798253,"user_tz":-330,"elapsed":482,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"54bcf1c6-a794-448f-efe9-5a70cd8346fa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(20640, 8)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["housing_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OtbYXyefkAKL","executionInfo":{"status":"ok","timestamp":1651994827858,"user_tz":-330,"elapsed":408,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"12997528-4350-467f-9322-5e407b755ee0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'DESCR': '.. _california_housing_dataset:\\n\\nCalifornia Housing dataset\\n--------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 20640\\n\\n    :Number of Attributes: 8 numeric, predictive attributes and the target\\n\\n    :Attribute Information:\\n        - MedInc        median income in block group\\n        - HouseAge      median house age in block group\\n        - AveRooms      average number of rooms per household\\n        - AveBedrms     average number of bedrooms per household\\n        - Population    block group population\\n        - AveOccup      average number of household members\\n        - Latitude      block group latitude\\n        - Longitude     block group longitude\\n\\n    :Missing Attribute Values: None\\n\\nThis dataset was obtained from the StatLib repository.\\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\\n\\nThe target variable is the median house value for California districts,\\nexpressed in hundreds of thousands of dollars ($100,000).\\n\\nThis dataset was derived from the 1990 U.S. census, using one row per census\\nblock group. A block group is the smallest geographical unit for which the U.S.\\nCensus Bureau publishes sample data (a block group typically has a population\\nof 600 to 3,000 people).\\n\\nAn household is a group of people residing within a home. Since the average\\nnumber of rooms and bedrooms in this dataset are provided per household, these\\ncolumns may take surpinsingly large values for block groups with few households\\nand many empty houses, such as vacation resorts.\\n\\nIt can be downloaded/loaded using the\\n:func:`sklearn.datasets.fetch_california_housing` function.\\n\\n.. topic:: References\\n\\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\\n      Statistics and Probability Letters, 33 (1997) 291-297\\n',\n"," 'data': array([[   8.3252    ,   41.        ,    6.98412698, ...,    2.55555556,\n","           37.88      , -122.23      ],\n","        [   8.3014    ,   21.        ,    6.23813708, ...,    2.10984183,\n","           37.86      , -122.22      ],\n","        [   7.2574    ,   52.        ,    8.28813559, ...,    2.80225989,\n","           37.85      , -122.24      ],\n","        ...,\n","        [   1.7       ,   17.        ,    5.20554273, ...,    2.3256351 ,\n","           39.43      , -121.22      ],\n","        [   1.8672    ,   18.        ,    5.32951289, ...,    2.12320917,\n","           39.43      , -121.32      ],\n","        [   2.3886    ,   16.        ,    5.25471698, ...,    2.61698113,\n","           39.37      , -121.24      ]]),\n"," 'feature_names': ['MedInc',\n","  'HouseAge',\n","  'AveRooms',\n","  'AveBedrms',\n","  'Population',\n","  'AveOccup',\n","  'Latitude',\n","  'Longitude'],\n"," 'frame': None,\n"," 'target': array([4.526, 3.585, 3.521, ..., 0.923, 0.847, 0.894]),\n"," 'target_names': ['MedHouseVal']}"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.impute import SimpleImputer"],"metadata":{"id":"Gmyt9700kJa3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df=pd.read_csv('/content/DataPreprocessingGraded_dataset.csv')"],"metadata":{"id":"q0OjwbztIlSR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"fBb9cSQ9IqKz","executionInfo":{"status":"ok","timestamp":1652611367436,"user_tz":-330,"elapsed":9,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"8ae5918e-08e7-451c-a20b-0973fbea67ae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 V3          V4\n","count    748.000000  748.000000\n","mean    1378.676471   34.282086\n","std     1459.826781   24.376714\n","min      250.000000    2.000000\n","25%      500.000000   16.000000\n","50%     1000.000000   28.000000\n","75%     1750.000000   50.000000\n","max    12500.000000   98.000000"],"text/html":["\n","  <div id=\"df-e2e331a9-5426-4c9a-ab29-2b0c147f7361\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V3</th>\n","      <th>V4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>748.000000</td>\n","      <td>748.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1378.676471</td>\n","      <td>34.282086</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1459.826781</td>\n","      <td>24.376714</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>250.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>500.000000</td>\n","      <td>16.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1000.000000</td>\n","      <td>28.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1750.000000</td>\n","      <td>50.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>12500.000000</td>\n","      <td>98.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2e331a9-5426-4c9a-ab29-2b0c147f7361')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e2e331a9-5426-4c9a-ab29-2b0c147f7361 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e2e331a9-5426-4c9a-ab29-2b0c147f7361');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_YvY9i9JF-E","executionInfo":{"status":"ok","timestamp":1652611370749,"user_tz":-330,"elapsed":8,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"3d1bba78-bb9a-421a-fb5b-b53710aaa0f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 748 entries, 0 to 747\n","Data columns (total 6 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   V1      748 non-null    object \n"," 1   V2      748 non-null    object \n"," 2   V3      748 non-null    float64\n"," 3   V4      748 non-null    float64\n"," 4   V5      748 non-null    object \n"," 5   Target  748 non-null    object \n","dtypes: float64(2), object(4)\n","memory usage: 35.2+ KB\n"]}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"psjT4ip3JIv5","executionInfo":{"status":"ok","timestamp":1652611370749,"user_tz":-330,"elapsed":4,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"c4c0fae4-3885-4b5a-f034-2f0fe9662193"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(748, 6)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"bQCiTG7GJ1P4","executionInfo":{"status":"ok","timestamp":1652611371220,"user_tz":-330,"elapsed":10,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"11557ce2-a7c3-4971-cf1e-aa674c7c176b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       V1    V2       V3    V4        V5 Target\n","0     2.0  50.0  12500.0  98.0  NEGATIVE    YES\n","1     0.0  13.0   3250.0  28.0  NEGATIVE    YES\n","2       ?     ?   4000.0  35.0  NEGATIVE    YES\n","3       ?  20.0   5000.0  45.0  NEGATIVE    YES\n","4     1.0  24.0   6000.0  77.0  NEGATIVE     NO\n","..    ...   ...      ...   ...       ...    ...\n","743  23.0   2.0    500.0  38.0  NEGATIVE     NO\n","744  21.0   2.0    500.0  52.0  NEGATIVE     NO\n","745  23.0   3.0    750.0  62.0  NEGATIVE     NO\n","746  39.0   1.0    250.0  39.0  NEGATIVE     NO\n","747  72.0   1.0    250.0  72.0  NEGATIVE     NO\n","\n","[748 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-23a810ee-3a77-4e7b-b1d2-c6244e4f9817\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.0</td>\n","      <td>50.0</td>\n","      <td>12500.0</td>\n","      <td>98.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>3250.0</td>\n","      <td>28.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>?</td>\n","      <td>?</td>\n","      <td>4000.0</td>\n","      <td>35.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>?</td>\n","      <td>20.0</td>\n","      <td>5000.0</td>\n","      <td>45.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>24.0</td>\n","      <td>6000.0</td>\n","      <td>77.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>743</th>\n","      <td>23.0</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>38.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>21.0</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>52.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>23.0</td>\n","      <td>3.0</td>\n","      <td>750.0</td>\n","      <td>62.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>746</th>\n","      <td>39.0</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>39.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>747</th>\n","      <td>72.0</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>72.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>748 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23a810ee-3a77-4e7b-b1d2-c6244e4f9817')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-23a810ee-3a77-4e7b-b1d2-c6244e4f9817 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-23a810ee-3a77-4e7b-b1d2-c6244e4f9817');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OrdinalEncoder"],"metadata":{"id":"kqQq-MvkKEjs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.fillna(df.mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"s0fBzCUOYQXf","executionInfo":{"status":"ok","timestamp":1652613221485,"user_tz":-330,"elapsed":475,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"30063ab2-a701-4665-f013-bd78e0a03fc3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","  \"\"\"Entry point for launching an IPython kernel.\n"]},{"output_type":"execute_result","data":{"text/plain":["       V1    V2       V3    V4        V5 Target\n","0     2.0  50.0  12500.0  98.0  NEGATIVE    YES\n","1     0.0  13.0   3250.0  28.0  NEGATIVE    YES\n","2     NaN   NaN   4000.0  35.0  NEGATIVE    YES\n","3     NaN  20.0   5000.0  45.0  NEGATIVE    YES\n","4     1.0  24.0   6000.0  77.0  NEGATIVE     NO\n","..    ...   ...      ...   ...       ...    ...\n","743  23.0   2.0    500.0  38.0  NEGATIVE     NO\n","744  21.0   2.0    500.0  52.0  NEGATIVE     NO\n","745  23.0   3.0    750.0  62.0  NEGATIVE     NO\n","746  39.0   1.0    250.0  39.0  NEGATIVE     NO\n","747  72.0   1.0    250.0  72.0  NEGATIVE     NO\n","\n","[748 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-f32a05b5-df83-477b-bc9f-cb4e8c8e78bf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.0</td>\n","      <td>50.0</td>\n","      <td>12500.0</td>\n","      <td>98.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>3250.0</td>\n","      <td>28.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4000.0</td>\n","      <td>35.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NaN</td>\n","      <td>20.0</td>\n","      <td>5000.0</td>\n","      <td>45.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>24.0</td>\n","      <td>6000.0</td>\n","      <td>77.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>743</th>\n","      <td>23.0</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>38.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>21.0</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>52.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>23.0</td>\n","      <td>3.0</td>\n","      <td>750.0</td>\n","      <td>62.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>746</th>\n","      <td>39.0</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>39.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>747</th>\n","      <td>72.0</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>72.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>748 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f32a05b5-df83-477b-bc9f-cb4e8c8e78bf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f32a05b5-df83-477b-bc9f-cb4e8c8e78bf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f32a05b5-df83-477b-bc9f-cb4e8c8e78bf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# df.isnull().sum()\n","df.loc[df.V2=='?','V2'].count()\n","df.replace('?',np.nan,inplace=True)"],"metadata":{"id":"yvu62oaLYWFu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"xVcZYFRTbF7_","executionInfo":{"status":"ok","timestamp":1652613213545,"user_tz":-330,"elapsed":8,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"155f9012-baf5-4abf-9ad9-72646aeb1dc2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       V1    V2       V3    V4        V5 Target\n","0     2.0  50.0  12500.0  98.0  NEGATIVE    YES\n","1     0.0  13.0   3250.0  28.0  NEGATIVE    YES\n","2     NaN   NaN   4000.0  35.0  NEGATIVE    YES\n","3     NaN  20.0   5000.0  45.0  NEGATIVE    YES\n","4     1.0  24.0   6000.0  77.0  NEGATIVE     NO\n","..    ...   ...      ...   ...       ...    ...\n","743  23.0   2.0    500.0  38.0  NEGATIVE     NO\n","744  21.0   2.0    500.0  52.0  NEGATIVE     NO\n","745  23.0   3.0    750.0  62.0  NEGATIVE     NO\n","746  39.0   1.0    250.0  39.0  NEGATIVE     NO\n","747  72.0   1.0    250.0  72.0  NEGATIVE     NO\n","\n","[748 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-a11391f0-4b33-46f0-808d-e8d6871d0a84\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.0</td>\n","      <td>50.0</td>\n","      <td>12500.0</td>\n","      <td>98.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>3250.0</td>\n","      <td>28.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4000.0</td>\n","      <td>35.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NaN</td>\n","      <td>20.0</td>\n","      <td>5000.0</td>\n","      <td>45.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>24.0</td>\n","      <td>6000.0</td>\n","      <td>77.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>743</th>\n","      <td>23.0</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>38.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>21.0</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>52.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>23.0</td>\n","      <td>3.0</td>\n","      <td>750.0</td>\n","      <td>62.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>746</th>\n","      <td>39.0</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>39.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>747</th>\n","      <td>72.0</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>72.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>748 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a11391f0-4b33-46f0-808d-e8d6871d0a84')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a11391f0-4b33-46f0-808d-e8d6871d0a84 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a11391f0-4b33-46f0-808d-e8d6871d0a84');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# imputer=SimpleImputer(missing_values=np.nan, strategy=\"mean\")\n","# imputer=imputer.fit(df)\n","# df\n","df['V1'] = pd.to_numeric(df['V1'],errors = 'coerce')\n","mean_value=df['V1'].mean()\n","df['V1'].fillna(value=mean_value, inplace=True)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"KZKinfoAbRB3","executionInfo":{"status":"ok","timestamp":1652613638646,"user_tz":-330,"elapsed":6,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"07e13e1f-1807-4e08-fb4f-79781b185bd3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            V1    V2       V3    V4        V5 Target\n","0     2.000000  50.0  12500.0  98.0  NEGATIVE    YES\n","1     0.000000  13.0   3250.0  28.0  NEGATIVE    YES\n","2     9.562584   NaN   4000.0  35.0  NEGATIVE    YES\n","3     9.562584  20.0   5000.0  45.0  NEGATIVE    YES\n","4     1.000000  24.0   6000.0  77.0  NEGATIVE     NO\n","..         ...   ...      ...   ...       ...    ...\n","743  23.000000   2.0    500.0  38.0  NEGATIVE     NO\n","744  21.000000   2.0    500.0  52.0  NEGATIVE     NO\n","745  23.000000   3.0    750.0  62.0  NEGATIVE     NO\n","746  39.000000   1.0    250.0  39.0  NEGATIVE     NO\n","747  72.000000   1.0    250.0  72.0  NEGATIVE     NO\n","\n","[748 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-cad68e0a-8c77-4a02-972d-c43535e52313\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.000000</td>\n","      <td>50.0</td>\n","      <td>12500.0</td>\n","      <td>98.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","      <td>13.0</td>\n","      <td>3250.0</td>\n","      <td>28.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9.562584</td>\n","      <td>NaN</td>\n","      <td>4000.0</td>\n","      <td>35.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9.562584</td>\n","      <td>20.0</td>\n","      <td>5000.0</td>\n","      <td>45.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.000000</td>\n","      <td>24.0</td>\n","      <td>6000.0</td>\n","      <td>77.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>743</th>\n","      <td>23.000000</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>38.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>21.000000</td>\n","      <td>2.0</td>\n","      <td>500.0</td>\n","      <td>52.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>23.000000</td>\n","      <td>3.0</td>\n","      <td>750.0</td>\n","      <td>62.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>746</th>\n","      <td>39.000000</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>39.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>747</th>\n","      <td>72.000000</td>\n","      <td>1.0</td>\n","      <td>250.0</td>\n","      <td>72.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>748 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cad68e0a-8c77-4a02-972d-c43535e52313')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cad68e0a-8c77-4a02-972d-c43535e52313 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cad68e0a-8c77-4a02-972d-c43535e52313');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["df['V2'] = pd.to_numeric(df['V2'],errors = 'coerce')\n","mean_value2=df['V2'].mean()\n","df['V2'].fillna(value=mean_value2, inplace=True)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Mz55iA1wczH9","executionInfo":{"status":"ok","timestamp":1652613683525,"user_tz":-330,"elapsed":819,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"995cee2f-cf63-4dc4-e5f0-392009e75498"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            V1         V2       V3    V4        V5 Target\n","0     2.000000  50.000000  12500.0  98.0  NEGATIVE    YES\n","1     0.000000  13.000000   3250.0  28.0  NEGATIVE    YES\n","2     9.562584   5.464334   4000.0  35.0  NEGATIVE    YES\n","3     9.562584  20.000000   5000.0  45.0  NEGATIVE    YES\n","4     1.000000  24.000000   6000.0  77.0  NEGATIVE     NO\n","..         ...        ...      ...   ...       ...    ...\n","743  23.000000   2.000000    500.0  38.0  NEGATIVE     NO\n","744  21.000000   2.000000    500.0  52.0  NEGATIVE     NO\n","745  23.000000   3.000000    750.0  62.0  NEGATIVE     NO\n","746  39.000000   1.000000    250.0  39.0  NEGATIVE     NO\n","747  72.000000   1.000000    250.0  72.0  NEGATIVE     NO\n","\n","[748 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-92ac0990-a4ae-4ba1-a498-10750363fe3e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.000000</td>\n","      <td>50.000000</td>\n","      <td>12500.0</td>\n","      <td>98.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","      <td>13.000000</td>\n","      <td>3250.0</td>\n","      <td>28.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9.562584</td>\n","      <td>5.464334</td>\n","      <td>4000.0</td>\n","      <td>35.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9.562584</td>\n","      <td>20.000000</td>\n","      <td>5000.0</td>\n","      <td>45.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.000000</td>\n","      <td>24.000000</td>\n","      <td>6000.0</td>\n","      <td>77.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>743</th>\n","      <td>23.000000</td>\n","      <td>2.000000</td>\n","      <td>500.0</td>\n","      <td>38.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>21.000000</td>\n","      <td>2.000000</td>\n","      <td>500.0</td>\n","      <td>52.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>23.000000</td>\n","      <td>3.000000</td>\n","      <td>750.0</td>\n","      <td>62.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>746</th>\n","      <td>39.000000</td>\n","      <td>1.000000</td>\n","      <td>250.0</td>\n","      <td>39.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>747</th>\n","      <td>72.000000</td>\n","      <td>1.000000</td>\n","      <td>250.0</td>\n","      <td>72.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>748 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92ac0990-a4ae-4ba1-a498-10750363fe3e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-92ac0990-a4ae-4ba1-a498-10750363fe3e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-92ac0990-a4ae-4ba1-a498-10750363fe3e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BPizC0O5c72q","executionInfo":{"status":"ok","timestamp":1652613698515,"user_tz":-330,"elapsed":6,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"acfa98e8-7a4b-4eba-ec4c-7a416977e3ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 748 entries, 0 to 747\n","Data columns (total 6 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   V1      748 non-null    float64\n"," 1   V2      748 non-null    float64\n"," 2   V3      748 non-null    float64\n"," 3   V4      748 non-null    float64\n"," 4   V5      748 non-null    object \n"," 5   Target  748 non-null    object \n","dtypes: float64(4), object(2)\n","memory usage: 35.2+ KB\n"]}]},{"cell_type":"code","source":["column_trans = ColumnTransformer([('simpleimputer', SimpleImputer(strategy='mean'), [0]),\n","                                  ('simpleimputer1', SimpleImputer(strategy='mean'), [1]),\n","                                  ('simpleimputer2', SimpleImputer(strategy='mean'), [2]),\n","                                  ('simpleimputer3', SimpleImputer(strategy='mean'), [3]),\n","\n","                                  ('ordinalencoder', OrdinalEncoder(), [4])])\n","column_trans.fit_transform(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D0nY0ke6KHuB","executionInfo":{"status":"ok","timestamp":1652613755672,"user_tz":-330,"elapsed":3,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"5012a851-a65d-4b6c-b910-d55cf4e752b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2.00000000e+00, 5.00000000e+01, 1.25000000e+04, 9.80000000e+01,\n","        0.00000000e+00],\n","       [0.00000000e+00, 1.30000000e+01, 3.25000000e+03, 2.80000000e+01,\n","        0.00000000e+00],\n","       [9.56258412e+00, 5.46433378e+00, 4.00000000e+03, 3.50000000e+01,\n","        0.00000000e+00],\n","       ...,\n","       [2.30000000e+01, 3.00000000e+00, 7.50000000e+02, 6.20000000e+01,\n","        0.00000000e+00],\n","       [3.90000000e+01, 1.00000000e+00, 2.50000000e+02, 3.90000000e+01,\n","        0.00000000e+00],\n","       [7.20000000e+01, 1.00000000e+00, 2.50000000e+02, 7.20000000e+01,\n","        0.00000000e+00]])"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"SZ1j-S6hXQtP","executionInfo":{"status":"ok","timestamp":1652613762056,"user_tz":-330,"elapsed":466,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"7f5e7265-eb74-4b90-c990-7c10b40372e8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            V1         V2       V3    V4        V5 Target\n","0     2.000000  50.000000  12500.0  98.0  NEGATIVE    YES\n","1     0.000000  13.000000   3250.0  28.0  NEGATIVE    YES\n","2     9.562584   5.464334   4000.0  35.0  NEGATIVE    YES\n","3     9.562584  20.000000   5000.0  45.0  NEGATIVE    YES\n","4     1.000000  24.000000   6000.0  77.0  NEGATIVE     NO\n","..         ...        ...      ...   ...       ...    ...\n","743  23.000000   2.000000    500.0  38.0  NEGATIVE     NO\n","744  21.000000   2.000000    500.0  52.0  NEGATIVE     NO\n","745  23.000000   3.000000    750.0  62.0  NEGATIVE     NO\n","746  39.000000   1.000000    250.0  39.0  NEGATIVE     NO\n","747  72.000000   1.000000    250.0  72.0  NEGATIVE     NO\n","\n","[748 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-3b16bce1-62b5-4c12-b2ff-466f62db4efa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.000000</td>\n","      <td>50.000000</td>\n","      <td>12500.0</td>\n","      <td>98.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","      <td>13.000000</td>\n","      <td>3250.0</td>\n","      <td>28.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9.562584</td>\n","      <td>5.464334</td>\n","      <td>4000.0</td>\n","      <td>35.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9.562584</td>\n","      <td>20.000000</td>\n","      <td>5000.0</td>\n","      <td>45.0</td>\n","      <td>NEGATIVE</td>\n","      <td>YES</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.000000</td>\n","      <td>24.000000</td>\n","      <td>6000.0</td>\n","      <td>77.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>743</th>\n","      <td>23.000000</td>\n","      <td>2.000000</td>\n","      <td>500.0</td>\n","      <td>38.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>21.000000</td>\n","      <td>2.000000</td>\n","      <td>500.0</td>\n","      <td>52.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>23.000000</td>\n","      <td>3.000000</td>\n","      <td>750.0</td>\n","      <td>62.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>746</th>\n","      <td>39.000000</td>\n","      <td>1.000000</td>\n","      <td>250.0</td>\n","      <td>39.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","    <tr>\n","      <th>747</th>\n","      <td>72.000000</td>\n","      <td>1.000000</td>\n","      <td>250.0</td>\n","      <td>72.0</td>\n","      <td>NEGATIVE</td>\n","      <td>NO</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>748 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b16bce1-62b5-4c12-b2ff-466f62db4efa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3b16bce1-62b5-4c12-b2ff-466f62db4efa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3b16bce1-62b5-4c12-b2ff-466f62db4efa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["import numpy as np\n","a=np.random.randn(3,3)\n","b=np.random.randn(2,1)\n","c=a+b\n","c.shape"],"metadata":{"id":"RwKm4JfFdMOb","colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"status":"error","timestamp":1654670884662,"user_tz":-330,"elapsed":10,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"3fbdf678-7b2e-4485-9a3f-2c57e1af9520"},"execution_count":22,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-6d37c449cd31>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (3,3) (2,1) "]}]},{"cell_type":"code","source":["c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iH2p7IjbBTQ8","executionInfo":{"status":"ok","timestamp":1654670368165,"user_tz":-330,"elapsed":520,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"a30a2238-d088-40b6-d652-06b45fc98af2"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.64731897,  0.26734699, -0.77459103],\n","       [ 0.61849144, -0.54435515, -0.33721133],\n","       [-0.46877306, -0.2531616 ,  0.01967577],\n","       [ 2.78392198, -0.45204655, -0.02793586]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["a.T*b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tY7ghkyqBaRS","executionInfo":{"status":"ok","timestamp":1654670427657,"user_tz":-330,"elapsed":429,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"379261c5-0cda-4722-8c91-5861c4bbb105"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.64731897,  0.61849144,  0.05804215],\n","       [ 0.26734699, -0.54435515, -0.21552505],\n","       [-0.77459103, -0.33721133, -0.06563739],\n","       [ 0.10199257,  0.16625171,  0.00243499]])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["a@b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kOUgDT68BcKI","executionInfo":{"status":"ok","timestamp":1654670453125,"user_tz":-330,"elapsed":389,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"4239452c-ae57-41b5-b7c4-5a766377f33c"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-1.05257044],\n","       [-0.09682333],\n","       [-0.22068531]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["a=np.array([[1,1],[1,-1]])\n","\n","b = np.array([[2], [3]])\n","c=a+b\n","c\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXVbIXsmCzFg","executionInfo":{"status":"ok","timestamp":1654670511304,"user_tz":-330,"elapsed":403,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"2659a32e-99a7-46d0-c47c-4c59bfc8ef87"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3, 3],\n","       [4, 2]])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["a=np.array([[2,1],[1,3]])\n","a*a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aDkypy8TDB7s","executionInfo":{"status":"ok","timestamp":1654670921253,"user_tz":-330,"elapsed":382,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"1e68e583-c18c-4e0b-d258-1f12032b0d39"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[4, 1],\n","       [1, 9]])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["a=np.array([[1,1],[1,-1]])\n","\n","b = np.array([[2], [3]])\n","\n","c = a + b"],"metadata":{"id":"DNIube1iEoh0","executionInfo":{"status":"ok","timestamp":1654671031668,"user_tz":-330,"elapsed":383,"user":{"displayName":"Param","userId":"18259045148872251788"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o0Kt5Mq4FCCe","executionInfo":{"status":"ok","timestamp":1654671035847,"user_tz":-330,"elapsed":582,"user":{"displayName":"Param","userId":"18259045148872251788"}},"outputId":"54f53686-3453-4f60-ad4f-1d29006ea942"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3, 3],\n","       [4, 2]])"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":[""],"metadata":{"id":"8IhQUrfqFEUi"},"execution_count":null,"outputs":[]}]}